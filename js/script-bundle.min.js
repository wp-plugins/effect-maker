/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

function AppManagement(clientContext, webPartMode) {
    var appContextSite = null;
    var spHostUrl = null;
    EM = new ErrorManager('#errormessage');
    var spHostUrl = EffectMaker.getHostUrl();
    var userConf = null;
    var lastEffectName = null;
    var fileCheckerCounter = 15;

    if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
        userImageFolder = EffectMaker.getUserImageFolder();
        appContextSite = EffectMaker.getAppContextSite();
        PM = new ParameterManagement(clientContext);
        EFM = new EffectManagement(clientContext);
        LM = new ListManager(clientContext, appContextSite);
        UCM = new UserContentManagement(clientContext, appContextSite);
    }
    else
    {
        PM = new ParameterManagement(null);
        EFM = new EffectManagement(null);
        UCM = new UserContentManagement(null, null);
    }
    configurator = new Configurator('#configuration');
    defaultImagesSelectable = false;

    function checkIfInitialized(divIDinit, divIDmain) {
        if (PM.isLoaded() && EFM.isLoaded() && UCM.isLoaded()) {
            $(divIDinit).hide();
            $(divIDmain).show();
            clearInterval(initThread);
            processParameters();
            showAnimation();
            EFM.setupGallery('#gallery','#galleryvertical',UCM.getUserConfigurations());
        };
    };

    function initMessageAnimation(fadein) {
        if (fadein) $('#initializationmessage').fadeIn(500, function () { initMessageAnimation(false); });
        else $('#initializationmessage').fadeOut(500, function () { initMessageAnimation(true); });
    };

    AppManagement.prototype.init = function (divIDinit, divIDmain) {
        this.divIDinit = divIDinit;
        this.divIDmain = divIDmain;
        initMessageAnimation(false);
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            var workdir = Ti.Filesystem.getDesktopDirectory() + '/effect maker work folder/';
            var f = Ti.Filesystem.getFile(workdir);
            if (!f.exists()) {
                f.createDirectory();
            }
            imageSubFolder = '';
            currentWorkFolder = workdir;
            var db2 = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getApplicationDataDirectory() + '/', 'effectmakerparams.db'));
            db2.execute("CREATE TABLE IF NOT EXISTS parameters(id INTEGER PRIMARY KEY, name TEXT, value TEXT);");
            db2.close();
        }
        PM.initParameters();
        EFM.initEffects();
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var manageList = new Array();
            manageList[0] = new ListChanger(new WorkFolder());
            manageList[1] = new ListChanger(new UserConfiguration());
            LM.checkLists(manageList, function () { UCM.initWorkFolder(true); });
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            UCM.initWorkFolder(true);
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            var workdir = Ti.Filesystem.getDesktopDirectory() + "/effect maker work folder/";
            var f = Ti.Filesystem.getFile(workdir);
            var fileitems = f.getDirectoryListing();
            if (fileitems.length < 2) {
                //copy workspace files to work folder for preview uses
                var dir2 = Ti.Filesystem.getResourcesDirectory() + "/workspace/";
                var f2 = Ti.Filesystem.getFile(dir2);
                var workspacefiles = f2.getDirectoryListing();
                for (var i = 0; i < workspacefiles.length; i++) {
                    if (workspacefiles[i].nativePath().indexOf('em_', 0) >= 0) workspacefiles[i].copy(f);
                }
            }
            UCM.initWorkFolder(true);
        }
        initThread = setInterval(function () { checkIfInitialized(divIDinit, divIDmain); }, 100);
        fileContentsThread = setInterval(function () { AppManagement.prototype.checkForNewFiles(); }, 1000);

    };


    AppManagement.prototype.checkForNewFiles = function () {
        fileCheckerCounter--;
        if (fileCheckerCounter <= 0) {
            fileCheckerCounter = 15;
            UCM.initWorkFolder(false);
        }
    };

    AppManagement.prototype.getParameterManagement = function () {
        return PM;
    };


    AppManagement.prototype.getCurrentUrl = function () {
        var currentUrl = window.location.href;
        currentUrl = currentUrl.substring(0, currentUrl.lastIndexOf('/') + 1);
        return currentUrl;
    };

    AppManagement.prototype.categoryClicked = function(category){
        configurator.selectCategory(category);
    };

    AppManagement.prototype.applyClicked = function () {
        AppManagement.prototype.destroyEffect();
        var output = configurator.applyDialog();
        eval(output[0]);
        eval('var defaultValues={'+output[1]+'};');
        UCM.setUserConfiguration(defaultValues['name'], configurator.getEffectName(), output[1]);
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            eval(defaultValues['name'] + '_urltarget="_blank";');
            eval(defaultValues['name'] + '_target="_blank";');
        }
        AppManagement.prototype.restartEffect();
        userConf = defaultValues['name'];
    };

    AppManagement.prototype.restoreClicked = function () {
        if (userConf != undefined && userConf != null) loadConfiguration(userConf);
        else if (lastEffectName != undefined && lastEffectName != null) createNewConfiguration(lastEffectName);

    };

    AppManagement.prototype.debugClicked = function () {
    };

    AppManagement.prototype.helpClicked = function () {
    };

    AppManagement.prototype.gotoUploadLibrary = function () {
        //Sharepoint only
        window.open(spHostUrl + '/Effect%20Maker%20Work%20Folder/Forms/AllItems.aspx', 'uploadpage');
    }


    AppManagement.prototype.deleteListItem = function (n) {
        configurator.deleteListItem(n);
    };

    AppManagement.prototype.moveListItem = function (n, up) {
        configurator.moveListItem(n,up);
    };

    AppManagement.prototype.addListItem = function () {
        configurator.addListItem();
    };

    AppManagement.prototype.effectSelected = function (effectName) {
        if ($('#note').length) $('#note').html('');
        createNewConfiguration(effectName);
    };


    AppManagement.prototype.loadConfiguration = function (name) {
        if (parseInt(PM.getParameter('galleryvertical')) == 1) loadConfiguration($('#loadconfiguration2').val());
        else loadConfiguration($('#loadconfiguration1').val());
    };

    AppManagement.prototype.deleteConfiguration = function (name) {
        var valueToRemove = null;
        userConf = null;
        lastEffectName=null;
        if (parseInt(PM.getParameter('galleryvertical')) == 1) valueToRemove = $('#loadconfiguration2').val();
        else valueToRemove = $('#loadconfiguration1').val();
        
        if (valueToRemove == null || valueToRemove.length == 0) alert('You have to select something in the list first...');
        else
        {
            if (confirm('Are you sure you want to delete the configuration "' + valueToRemove + '"? This cannot be undone.')) {
                UCM.deleteUserConfiguration(valueToRemove);
                //remove item from list
                $("#loadconfiguration1 option[value='" + valueToRemove + "']").remove();
                $("#loadconfiguration2 option[value='" + valueToRemove + "']").remove();
            };
        }
    };

    AppManagement.prototype.deleteConfigurationConfirmed = function () {
    }

    AppManagement.prototype.destroyEffect = function () {
        //to be overwritten by effect functions
    };

    function processParameters() {
        if (PM.getParameter('defaultimagesselectable') != null) {
            defaultImagesSelectable = (parseInt(PM.getParameter('defaultimagesselectable'))==1);
        };
        if (PM.getParameter('showconsole') != null) {
            var show = parseInt(PM.getParameter('showconsole'));
            if (show == 1) $('#errormessage').css('display', 'block');
            else $('#errormessage').css('display', 'none');
        };
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {

            if (PM.getParameter('currentworkfolder') != null) {
                currentWorkFolder = PM.getParameter('currentworkfolder');
                EM.addStatusMessage('Got work folder from parameter: ' + currentWorkFolder);
            }
            else {
                PM.setParameter('currentworkfolder', currentWorkFolder);
                EM.addStatusMessage('Put workfolder into new parameter: ' + currentWorkFolder);
            }
        }
        if (PM.getParameter('galleryvertical') != null) {
            var show = parseInt(PM.getParameter('galleryvertical'));
            AppManagement.prototype.flipGallery(show == 1);
        }
        else
        {
            AppManagement.prototype.flipGallery(true);

        }
  /*      if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            if (PM.getParameter('license') != null) {
                LCM.verifyLicense(PM.getParameter('license'));
            }
            else {
                LCM.verifyLicense('');
            }
        }*/
    };

    AppManagement.prototype.flipGallery = function (vertical) {
        if (vertical) {
            $('#galleryflipper1').css('display', 'block');
            $('#galleryvertical').css('display', 'block');
            $('#gallery').css('display', 'none');
            $('#galleryflipper2').css('display', 'none');
            PM.setParameter('galleryvertical', '1');
        }
        else {
            $('#galleryflipper1').css('display', 'none');
            $('#galleryvertical').css('display', 'none');
            $('#gallery').css('display', 'block');
            $('#galleryflipper2').css('display', 'block');
            PM.setParameter('galleryvertical', '0');
        }
    };

    AppManagement.prototype.toggleConsole = function (id) {
        if ($('#errormessage').css('display') == 'block') {
            PM.setParameter('showconsole', 0);
            $('#errormessage').css('display', 'none');
        }
        else {
            PM.setParameter('showconsole', 1);
            $('#errormessage').css('display', 'block');
        }
    };


    function loadConfiguration(name) {
        lastEffectName = null;
        userConf = name;
        effectName = UCM.getUserConfigurationByName(name).effectName;
        configurator.getDefaultConfiguration(effectName, loadConfigurationHelper);
    };

    function loadConfigurationHelper(effectName, defaultConfiguration) {
        AppManagement.prototype.destroyEffect();
        eval(defaultConfiguration);
        var effect = EFM.getEffect(effectName);
        eval(UCM.getUserConfigurationByName(userConf).getConfigurationEval());
        $('#bottombuttonbar').show();
        configurator.setupDialog(configuration, defaultValues, UCM.getFileNames(defaultImagesSelectable), userConf, effectName);
        var code = configurator.getCodeFromValues(defaultValues);
        eval(code);
        EFM.applyEvaluateInstance(effect.name, userConf);
    };

    function createNewConfiguration(effectName) {
        configurator.getDefaultConfiguration(effectName, createNewConfigurationHelper);
    };

    function createNewConfigurationHelper(effectName, defaultConfiguration) {
        //clear userConf so that no invalid configuration can be restored
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) currentWorkFolder = Ti.Filesystem.getDesktopDirectory() + "/effect maker work folder/";
        userConf = null;
        AppManagement.prototype.destroyEffect();
        eval(defaultConfiguration);
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE)
        {
            configuration[configuration.length] = new ConfiguratorItem(configurator.TEXTFIELD, 'imagesubfolder', 'General', 'Image Sub Folder', 'The folder name of the images relative to the HTML file where this JavaScript file is being inserted into.', false);
            if (defaultValues['imagesubfolder'] == undefined) defaultValues['imagesubfolder'] = '';
            imageSubFolder = defaultValues['imagesubfolder'] ;
        }
        var effect = EFM.getEffect(effectName);
        defaultValues['name'] = effectName + (UCM.getNumberOfInstances(effectName) + 1);
        lastEffectName=effectName;
        var defaultUserConf = defaultValues['name'];
        $('#bottombuttonbar').show();
        configurator.setupDialog(configuration, defaultValues, UCM.getFileNames(defaultImagesSelectable), defaultUserConf, effectName);
        var code = configurator.getCodeFromValues(defaultValues);
        eval(code);
        EFM.applyEvaluateInstance(effect.name, defaultUserConf);
    };

    function showAnimation() {

    };


};
/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

function Configurator(configurationHTMLID) {
    this.configurationHTMLID = configurationHTMLID;

    this.TEXTFIELD = 0;
    this.TEXTAREA = 1;
    this.COLORFIELD = 2;
    this.CHOICEFIELD = 3;
    this.LIST = 4;
    this.FILEFIELD = 5;
    this.FONTFIELD = 6;
    this.CHECKBOX = 7;
    this.CONSTANT = 8;

    carriagereturn = String.fromCharCode(13);
    linefeed = String.fromCharCode(10);
    singlequote = String.fromCharCode(39);
    doublequote = String.fromCharCode(34);
    backslash = String.fromCharCode(92);
    categorynames = new Array();
    categoryids = new Array();
    categorycontent = new Array();
    colorpickers = new Array();
    fontfields = new Array();
    listTracker = new Array();
    listConfiguration = null;
    maxListIndex = 0;
    tabExists = false;
    fontList = ['inherit', 'arial', 'arial black', 'comic sans ms', 'courier', 'courier new', 'georgia', 'helvetica', 'impact', 'palatino', 'times new roman', 'trebuchet ms, verdana'];

    Configurator.prototype.setupDialogAddListItem = function (item, defaultValues, content, k) {
        if (item.type == this.TEXTFIELD) {
            var value = defaultValues[item.name + k];
            if (!value) value = '';
            content += '<div style="display:block">' + item.label + ': ';
            content += '<input id="' + item.name + k + '" name="' + item.name + '" type="text" value="' + value + '" style="width:340px"/><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div>';
        }
        if (item.type == this.TEXTAREA) {
            var value = defaultValues[item.name + k];
            if (!value) value = '';
            content += '<div style="display:block">' + item.label + ': <img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div>';
            content += '<textarea id="' + item.name + k + '" name="' + item.name + '" rows="3" cols="30" style="width:400px">' + value + '</textarea>';
        }
        if (item.type == this.COLORFIELD) {
            var value = defaultValues[item.name + k];
            if (!value) value = '#000000';
            content += '<div style="display:block">' + item.label + ': ';
            content += '<div id="' + item.name + k + '" name="' + item.name + '" onclick="return false;" style="width:100px; height:20px; background-color:' + defaultValues[item.name + k] + '; border:1px solid;" >&nbsp;</div><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div>';
            colorpickers.push(item);
        }
        if (item.type == this.CHOICEFIELD) {
            var value = defaultValues[item.name + k];
            if (!value) value = '';
            content += '<div style="display:block">' + item.label + ': ';
            content += '<select id="' + item.name + k + '" name="' + item.name + '"  style="width:340px; ">';
            //two output types can be used here index and actual values
            if (item.param1) //index output, zero based
            {
                for (var j = 0; j < item.param2.length; j++) {
                    if (value == j) content += '<option value="' + j + '" SELECTED>' + item.param2[j] + '</option>';
                    else content += '<option value="' + j + '">' + item.param2[j] + '</option>';
                }
            }
            else {
                for (var j = 0; j < item.param2.length; j++) {
                    if (value == item.param2[j]) content += '<option value="' + item.param2[j] + '" SELECTED>' + item.param2[j] + '</option>';
                    else content += '<option value="' + item.param2[j] + '">' + item.param2[j] + '</option>';
                }
            }
            content += '</select><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div>';
        }
        if (item.type == this.FILEFIELD) {
            var value = defaultValues[item.name + k];
            if (!value) value = '';
            content += '<div style="display:block">' + item.label + ': ';
            content += '<select id="' + item.name + k + '" name="' + item.name + '"  style="width:340px;">';
            //two output types can be used here index and actual values
            for (var j = 0; j < workFolder.length; j++) {
                if (value == workFolder[j]) content += '<option value="' + workFolder[j] + '" SELECTED>' + workFolder[j] + '</option>';
                else content += '<option value="' + workFolder[j] + '">' + workFolder[j] + '</option>';
                }
            content += '</select><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div>';
        }
        if (item.type == this.CHECKBOX) {
            var value = defaultValues[item.name + k];
            if (!value) value = false;
            content += '<label style="display:block"><input id="' + item.name + k + '" name="' + item.name + k + '" type="checkbox" value="' + item.name + k + '" ' + (value ? 'CHECKED' : '') + '/>&nbsp;' + item.label;
            content += '<img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></label>';
        }
        return content;

    };


    Configurator.prototype.fixListLayout = function () {
        for (var i = 0; i < listTracker.length; i++) {
            if (i == 0) $(listTracker[i] + '_uparrow').css('display', 'none');
            else $(listTracker[i] + '_uparrow').css('display', 'inline');
            if (i == listTracker.length-1) $(listTracker[i] + '_downarrow').css('display', 'none');
            else $(listTracker[i] + '_downarrow').css('display', 'inline');
            $(listTracker[i]).css('background-color', (((i % 2) == 1) ? 'white' : 'lightGray'));
        }
    };

    Configurator.prototype.addListItem = function () {
        var item = listConfiguration;
        listTracker.push('#' + item.name + maxListIndex);
        //add one line to the list
        var content = '';
        content = Configurator.prototype.setupDialogAddListItemLayout(content, item, maxListIndex, maxListIndex);
        for (var j = 0; j < item.param1.length; j++) {
            content = this.setupDialogAddListItem(item.param1[j], defaultValues, content, maxListIndex);
        }
        content += '</div></div>';

        $('#' + item.name + '_add').before(content);
        maxListIndex++;
        Configurator.prototype.fixListLayout();

    };

    Configurator.prototype.deleteListItem = function (name) {
        var n = $.inArray(name, listTracker);
        $(name).remove();
        listTracker.splice(n, 1);
        Configurator.prototype.fixListLayout();
    };


    Configurator.prototype.moveListItem = function (name, up) {
        var n = $.inArray(name, listTracker);
        if (up && n > 0) {
            $(listTracker[n]).insertBefore($(listTracker[n - 1]));
            var id = listTracker[n - 1];
            listTracker[n - 1] = listTracker[n];
            listTracker[n] = id;
        }
        if (!up && n < listTracker.length - 1) {
            $(listTracker[n]).insertAfter($(listTracker[n + 1]));
            var id = listTracker[n + 1];
            listTracker[n + 1] = listTracker[n];
            listTracker[n] = id;
        }
        Configurator.prototype.fixListLayout();
    };

    Configurator.prototype.setupDialogAddListItemLayout = function (content, item, k, nitems) {
        
        content += '<div id="' + item.name + k + '" style="padding-top:2px; padding-bottom:2px; padding-left:3px; display:inline-block; width:100%; background-color:' + (((k % 2) == 1) ? 'white' : 'lightGray') + '">';
        if (EffectMaker.getEnvironment() != EffectMaker.STANDALONE) {
            content += '<div style="width: 80px; float:left; height:40px; padding-top:5px; padding-bottom:5px"  class="effectmakerlistitem">';
            content += '<div style="width: 26px; height:20px; float:left;"><img id="' + item.name + k + '_uparrow' + '" src="' + EffectMaker.getSystemImageFolder() + 'uparrow.png" style="cursor:pointer; display:' + ((k == 0) ? 'none' : 'inline') + '" onClick="AM.moveListItem(' + singlequote + '#' + item.name + k + singlequote + ',true);"></div>';
            content += '<div style="width: 50px; height:20px; clear: right; display:flex; align-items:center"><img src="' + EffectMaker.getSystemImageFolder() + 'listdecnumleft.png"><div style="background-color:#006e85; width:30px; height:20px; color:#ffffff; text-align:center;">' + (k + 1) + '</div><img src="' + EffectMaker.getSystemImageFolder() + 'listdecnumright.png"></div>';
            content += '<div style="width: 26px; height:20px; float:left;"><img id="' + item.name + k + '_downarrow' + '" src="' + EffectMaker.getSystemImageFolder() + 'downarrow.png" style="cursor:pointer; display:' + ((k == nitems - 1) ? 'none' : 'inline') + '" onClick="AM.moveListItem(' + singlequote + '#' + item.name + k + singlequote + ',false);"></div>';
            content += '<div style="width: 50px; height:20px; clear: right; display:flex; align-items:center"><img src="' + EffectMaker.getSystemImageFolder() + 'deleteicon.png" style="cursor:pointer;  margin-left:13px; margin-right:auto;" onClick="AM.deleteListItem(' + singlequote + '#' + item.name + k + singlequote + ');"></div>';
            content += '</div>';
        }
        else
        {
            //due to Tide SDK webkit bugs we must use a table here
            content += '<table style="width: 80px; float:left; height:40px; padding-top:5px; padding-bottom:5px"  class="effectmakerlistitem"><tr>';
            content += '<td style="width: 26px; height:20px;"><img id="' + item.name + k + '_uparrow' + '" src="' + EffectMaker.getSystemImageFolder() + 'uparrow.png" style="cursor:pointer; display:' + ((k == 0) ? 'none' : 'inline') + '" onClick="AM.moveListItem(' + singlequote + '#' + item.name + k + singlequote + ',true);"></td>';
            content += '<td style="width: 50px; height:20px;"><img src="' + EffectMaker.getSystemImageFolder() + 'listdecnumleft.png" style="float:left"><div style="background-color:#006e85; width:30px; height:20px; color:#ffffff; text-align:center; float:left">' + (k + 1) + '</div><img src="' + EffectMaker.getSystemImageFolder() + 'listdecnumright.png" style="clear:left"></td></tr><tr>';
            content += '<td style="width: 26px; height:20px;"><img id="' + item.name + k + '_downarrow' + '" src="' + EffectMaker.getSystemImageFolder() + 'downarrow.png" style="cursor:pointer; display:' + ((k == nitems - 1) ? 'none' : 'inline') + '" onClick="AM.moveListItem(' + singlequote + '#' + item.name + k + singlequote + ',false);"></td>';
            content += '<td style="width: 50px; height:20px; align-items:center"><img src="' + EffectMaker.getSystemImageFolder() + 'deleteicon.png" style="cursor:pointer;  margin-left:13px; margin-right:auto;" onClick="AM.deleteListItem(' + singlequote + '#' + item.name + k + singlequote + ');"></td>';
            content += '</td></table>';
        }
        content += '<div style="width: auto; display:inline-block; padding-top:2px;">';
        return content;
    };

    Configurator.prototype.getEffectName = function () {
        return effectName;
    };

    Configurator.prototype.getDefaultConfiguration = function (effectName, callBack) {
            $.get(EffectMaker.getEffectFolder() + effectName + '_conf.js', function (data) {
                callBack(effectName,data);
            }, 'text');
    };

    Configurator.prototype.setupDialog = function (configuratorItems2, defaultValues2, workFolder2, instanceName2, effectName2) {
        configuratorItems = configuratorItems2;
        defaultValues = defaultValues2;
        workFolder = workFolder2;
        instanceName = instanceName2;
        effectName = effectName2;
        categorycontent = new Array();
        categorynames = new Array();
        categoryids = new Array();
        listTracker = new Array();
        listConfiguration = null;
        maxListIndex = 0;
        colorpickers = new Array();
        fontfields = new Array();

        if (tabExists) $(configurationHTMLID).tabs('destroy');
        tabExists = true;
        $(configurationHTMLID).html('');
        $(configurationHTMLID).tooltip();
        var tabHTMLHeaders = '<ul>';
        var tabHTMLContent = '';
        for (var i = 0; i < configuratorItems.length; i++) {
            var item = configuratorItems[i];
            if (item.type!=this.CONSTANT && categorynames.indexOf(item.category) == -1) {
                categorynames.push(item.category);
                tabHTMLHeaders += '<li><a href="#cat-' + (i + 1) + '">' + item.category + '</a></li>';
                categorycontent[item.category] = '<div id="cat-' + (i + 1) + '">';
                categoryids[item.category] = '#category_' + item.category;
            }
            if (item.type == this.TEXTFIELD) {
                categorycontent[item.category] += '<div style="width:600px; float:left;">' + item.label + ': ';
                categorycontent[item.category] += '<input id="' + item.name + '" name="' + item.name + '" type="text" value="' + defaultValues[item.name] + '" style="width:300px; clear:left"/><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div><BR/><BR/>';
            }
            if (item.type == this.FONTFIELD) {
                categorycontent[item.category] += '<div style="width:600px; float:left">' + item.label + ': ';
                categorycontent[item.category] += '<input id="' + item.name + '" name="' + item.name + '" type="text" value="' + defaultValues[item.name] + '" style="width:300px; clear:left"/><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div><BR/><BR/>';
                fontfields.push(item);
            }
            if (item.type == this.TEXTAREA) {
                categorycontent[item.category] += '<div>' + item.label + ': <img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div><BR/>';
                categorycontent[item.category] += '<textarea id="' + item.name + '" name="' + item.name + '" rows="6" cols="30" title="' + item.description + '" style="width:400px">' + defaultValues[item.name] + '</textarea><BR/><BR/>';
            }
            if (item.type == this.COLORFIELD) {
                categorycontent[item.category] += '<div style="width:600px; float:left">' + item.label + ': ';
                categorycontent[item.category] += '<div id="' + item.name + '" name="' + item.name + '" onclick="return false;" style="display:inline-block; width:100px; height:20px; background-color:' + defaultValues[item.name] + '; border:1px solid; clear:left">&nbsp;</div><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png"  style="margin-left:5px; vertical-align:middle;"></div><BR/><BR/>';
                colorpickers.push(item);
            }
            if (item.type == this.CHOICEFIELD) {
                categorycontent[item.category] += '<div style="width:600px; float:left">' + item.label + ': ';
                categorycontent[item.category] += '<select id="' + item.name + '" name="' + item.name + '" style="width:300px; clear:left">';
                //two output types can be used here index and actual values
                if (item.param1) //index output, zero based
                {
                    for (var j = 0; j < item.param2.length; j++) {
                        if (defaultValues[item.name] == j) categorycontent[item.category] += '<option value="' + j + '" SELECTED>' + item.param2[j] + '</option>';
                        else categorycontent[item.category] += '<option value="' + j + '">' + item.param2[j] + '</option>';
                    }
                }
                else {
                    for (var j = 0; j < item.param2.length; j++) {
                        if (defaultValues[item.name] == item.param2[j]) categorycontent[item.category] += '<option value="' + item.param2[j] + '" SELECTED>' + item.param2[j] + '</option>';
                        else categorycontent[item.category] += '<option value="' + item.param2[j] + '">' + item.param2[j] + '</option>';
                    }
                }
                categorycontent[item.category] += '</select><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div><BR/><BR/>';
            }
            if (item.type == this.FILEFIELD) {
                categorycontent[item.category] += '<div style="width:600px; float:left">' + item.label + ': ';
                categorycontent[item.category] += '<select id="' + item.name + '" name="' + item.name + '" style="width:300px; clear:left">';
                //two output types can be used here index and actual values
                for (var j = 0; j < workFolder.length; j++) {
                    if (defaultValues[item.name] == workFolder[j]) categorycontent[item.category] += '<option value="' + workFolder[j] + '" SELECTED>' + workFolder[j] + '</option>';
                    else categorycontent[item.category] += '<option value="' + workFolder[j] + '">' + workFolder[j] + '</option>';
                }
                categorycontent[item.category] += '</select><img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></div><BR/><BR/>';
            }
            if (item.type == this.CHECKBOX) {
                var value = defaultValues[item.name];
                if (!value) value = false;
                categorycontent[item.category] += '<label><input title="' + item.description + '" id="' + item.name + '" name="' + item.name + '" type="checkbox" value="' + item.name + '" ' + (value ? 'CHECKED' : '') + '/>&nbsp;'+item.label;
                categorycontent[item.category] += '<img title="' + item.description + '" src="' + EffectMaker.getSystemImageFolder() + 'iconhelptip.png" style="margin-left:5px; vertical-align:middle;"></label><BR/><BR/>';
            }
            if (item.type == this.LIST) {
                //        categorycontent[item.category] += '<div title="' + item.description + '">' + item.label + ': </div><BR/>';
                //First we define a scrollable area with all the list items
                categorycontent[item.category] += '<div id="'+item.name+'" title="' + item.description + '" style="width: 600px; height:300px; overflow-y:auto;">';
                //we must find out how many parameters the user has actually configured
                var nitems = 0;
                while ((item.param1[0].name + nitems) in defaultValues) nitems++;
                maxListIndex = nitems;
                for (var k = 0; k < nitems; k++) {
                    //   var item2 = item.param1[k];
                    //add one line to the list
                    categorycontent[item.category] = Configurator.prototype.setupDialogAddListItemLayout(categorycontent[item.category], item, k, nitems);
                    listTracker[k] = '#'+item.name+k; //This array keeps track on the items we added to the list, so that we can delete them later
                    for (var j = 0; j < item.param1.length; j++) {
                        categorycontent[item.category] = this.setupDialogAddListItem(item.param1[j], defaultValues, categorycontent[item.category], k);
                    }
                    categorycontent[item.category] += '</div></div></br>';
                }
                listConfiguration = item;
                //finally add one line for the add one item button
                categorycontent[item.category] += '<div id="' + item.name + '_add' + '" style="display: block; width: 600px; height:40px; padding-top:20px; padding-bottom:20px; cursor:pointer;" onClick="AM.addListItem()"><img src="' + EffectMaker.getSystemImageFolder() + 'addicon.png" style="display:block; margin:auto;"></div>';

                categorycontent[item.category] += '</div>';

            }
        }
        for (var i = 0; i < categorynames.length; i++)
            tabHTMLContent += categorycontent[categorynames[i]] + '</div>';
        tabHTMLHeaders += '</ul>';
        $(configurationHTMLID).append(tabHTMLHeaders + tabHTMLContent);
        $(configurationHTMLID).tabs({ heightStyle: 'auto' });
        for (var i = 0; i < fontfields.length; i++) {
            $('#' + fontfields[i].name).autocomplete({ minLength: 0, source: fontList })
            .data('ui-autocomplete')._renderItem = function (ul, item) {

                return $('<li>').append('<a style="font-family:'+item.label+'">' + item.label + '</a>').appendTo(ul);
            };
        }
        for (var i = 0; i < colorpickers.length; i++) {
            $('#' + colorpickers[i].name).colpick({
                layout: 'hex', color: item.defaultvalue, submit: 0, onChange: function (hsb, hex, rgb, el, bySetColor) {
                    $(el).css('background-color', '#' + hex);
                    $(el).val('#' + hex);
                }
            });
            $('#' + colorpickers[i].name).val(defaultValues[colorpickers[i].name]);
        }
    };

    Configurator.prototype.restoreDialog = function()
    {
        $(configurationHTMLID).tabs('destroy');
        $(configurationHTMLID).html('');
        Configurator.prototype.setupDialog(configuratorItems, defaultValues, EffectMaker.getWorkFolder());
    };

    Configurator.prototype.applyDialog = function(useImageFolder)
    {
        defaultValues = '';
        containsarrays = '';
        var output = '';
        var dependentFiles = new Array();
        if (useImageFolder == undefined) useImageFolder = true;
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE && configuratorItems[configuratorItems.length - 1].name == 'imagesubfolder') {
            imageSubFolder = $('#imagesubfolder').val().trim();
        }
        else imageSubFolder = '';
        for (var i = 0; i < configuratorItems.length; i++) {
            var item = configuratorItems[i];
            if (item.type == this.TEXTFIELD) {
                if (item.param1) {
                    defaultValues += item.name + ': ' + $('#' + item.name).val() + ', ';
                    output += instanceName + '_' + item.name + ' = ' + $('#' + item.name).val() + ';';
                }
                else {
                    defaultValues += item.name + ': "' + fixString($('#' + item.name).val()) + '", ';
                    output += instanceName + '_' + item.name + ' = "' + fixString($('#' + item.name).val()) + '"' + ';';
                }
            }
            if (item.type == this.TEXTAREA) {
                defaultValues += item.name + ': "' + fixString($('#' + item.name).val()) + '", ';
                output += instanceName + '_' + item.name + ' = "' + fixString($('#' + item.name).val()) + '"' + ';';
            }
            if (item.type == this.COLORFIELD) {
                defaultValues += item.name + ': "' + $('#' + item.name).val() + '", ';
                output += instanceName + '_' + item.name + ' = "' + $('#' + item.name).val() + '"' + ';';
            }
            if (item.type == this.FONTFIELD) {
                defaultValues += item.name + ': "' + $('#' + item.name).val() + '", ';
                output += instanceName + '_' + item.name + ' = "' + $('#' + item.name).val() + '"' + ';';
            }
            if (item.type == this.CHOICEFIELD) {
                defaultValues[item.name] = $('#' + item.name).val();
                //two output types can be used here index and actual values
                if (item.param1) //index output, zero based
                {
                    defaultValues += item.name + ': ' + $('#' + item.name).val() + ', ';
                    output += instanceName + '_' + item.name + ' = ' + $('#' + item.name).val() + ';';
                }
                else {
                    defaultValues += item.name + ': "' + $('#' + item.name).val() + '", ';
                    output += instanceName + '_' + item.name + ' = "' + $('#' + item.name).val() + '"' + ';';
                }
            }
            if (item.type == this.FILEFIELD) {
                var value = $('#' + item.name).val();
                if (value == undefined) value = '';
                defaultValues += item.name + ': "' + value + '", ';
                if (useImageFolder) {
                    if (value.indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) output += instanceName + '_' + item.name + ' = "' + defaultImageFolder + value + '"' + ';';
                    else output += instanceName + '_' + item.name + ' = "' + userImageFolder + imageSubFolder + value + '"' + ';';
                }
                else {
                    if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                        dependentFiles[dependentFiles.length] = imageSubFolder + value;
                        output += instanceName + '_' + item.name + ' = "' + imageSubFolder + value + '"' + ';';
                    }
                    else output += instanceName + '_' + item.name + ' = "' + value + '"' + ';';
                }
            }
            if (item.type == this.CHECKBOX) {
                defaultValues += item.name + ': ' + $('#' + item.name).is(':checked') + ', ';
                output += instanceName + '_' + item.name + ' = ' + $('#' + item.name).is(':checked') + ';';
            }
            if (item.type == this.LIST) {
                //we use N simultaneous storage spaces for the arrays
                var outputs = new Array(item.param1.length);
                containsarrays += 'em_containsarrays: "';
                for (var j = 0; j < outputs.length; j++) {
                    outputs[j] = instanceName + '_' + item.param1[j].name + ' = new Array();';
                    if (j == outputs.length - 1) containsarrays += item.param1[j].name;
                    else containsarrays += item.param1[j].name + ';';
                }
                containsarrays += '", ';
                defaultValues += containsarrays;
                for (var k = 0; k < listTracker.length; k++) {
                    var ind = parseInt(listTracker[k].substring(item.name.length+1));
                    for (var j = 0; j < item.param1.length; j++) {
                        var item2 = item.param1[j];
                        if (item2.type == this.TEXTFIELD) {
                            if (item2.param1) {
                                defaultValues += item2.name + k + ': ' + $('#' + item2.name + ind).val() + ', ';
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + '] = ' + $('#' + item2.name + ind).val() + ';';
                            }
                            else {
                                defaultValues += item2.name + k + ': "' + fixString($('#' + item2.name + ind).val()) + '", ';
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + fixString($('#' + item2.name + ind).val()) + '"' + ';';
                            }
                        }
                        if (item2.type == this.TEXTAREA) {
                            defaultValues += item2.name + k + ': "' + fixString($('#' + item2.name + ind).val()) + '", ';
                            outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + fixString($('#' + item2.name + ind).val()) + '"' + ';';
                        }
                        if (item2.type == this.COLORFIELD) {
                            defaultValues += item2.name + k + ': "' + $('#' + item2.name + ind).val() + '", ';
                            outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + $('#' + item2.name + ind).val() + '"' + ';';
                        }
                        if (item2.type == this.CHOICEFIELD) {
                            if (item2.param1) //index output, zero based
                            {
                                defaultValues += item2.name + k + ': ' + $('#' + item2.name + ind).val() + ', ';
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = ' + $('#' + item2.name + ind).val() + ';';
                            }
                            else {
                                defaultValues += item2.name + k + ': "' + $('#' + item2.name + ind).val() + '", ';
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + $('#' + item2.name + ind).val() + '"' + ';';
                            }
                        }
                        if (item2.type == this.FILEFIELD) {
                            var value = $('#' + item2.name + ind).val();
                            if (value == undefined) value = '';
                            defaultValues += item2.name + k + ': "' + value + '", ';
                            if (useImageFolder) {
                                if (value.indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + defaultImageFolder + value + '"' + ';';
                                else outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + userImageFolder + imageSubFolder + value + '"' + ';';
                            }
                            else {
                                if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                                    dependentFiles[dependentFiles.length] = imageSubFolder + value;
                                    outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + imageSubFolder + value + '"' + ';';
                                }
                                else outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + value + '"' + ';';
                            }
                        }
                    }
                }
                for (var j = 0; j < outputs.length; j++)
                    output += outputs[j];

            }
            if (item.type == this.CONSTANT) {
                var value = item.param1;
                if (item.param2) {
                    if (useImageFolder) {
                        if (value.indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) output += instanceName + '_' + item.name + ' = "' + defaultImageFolder + value + '"' + ';';
                        else output += instanceName + '_' + item.name + ' = "' + userImageFolder + imageSubFolder + value + '"' + ';';
                    }
                    else {
                        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                            dependentFiles[dependentFiles.length] = imageSubFolder + value;
                            output += instanceName + '_' + item.name + ' = "' + imageSubFolder + value + '"' + ';';
                        }
                        else output += instanceName + '_' + item.name + ' = "' + value + '"' + ';';
                    }
                }
                else
                {
                    if (typeof(value)==='string') output += instanceName + '_' + item.name + ' = "' + value + '"' + ';';
                    else output += instanceName + '_' + item.name + ' = ' + value + '' + ';';
                }
                if (typeof (value) === 'string') defaultValues += item.name + ': "' + value + '", ';
                else defaultValues += item.name + ': ' + value + ', ';
            }
        }
        //before we add the bracket, we remove the last comma and space
        defaultValues = defaultValues.substring(0,defaultValues.length-2);
        return [output,defaultValues,dependentFiles];
    };

    Configurator.prototype.getCodeFromValues = function (values) {
        var output = '';
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE && configuratorItems[configuratorItems.length - 1].name == 'imagesubfolder') {
            imageSubFolder = values['imagesubfolder'].trim();
        }
        else imageSubFolder = '';
        for (var i = 0; i < configuratorItems.length; i++) {
            var item = configuratorItems[i];
            if (item.type == this.TEXTFIELD) {
                if (item.param1) {
                    output += instanceName + '_' + item.name + ' = ' + values[item.name] + ';';
                }
                else {
                    output += instanceName + '_' + item.name + ' = "' + fixString(values[item.name]) + '"' + ';';
                }
            }
            if (item.type == this.TEXTAREA) {
                output += instanceName + '_' + item.name + ' = "' + fixString(values[item.name]) + '"' + ';';
            }
            if (item.type == this.COLORFIELD) {
                output += instanceName + '_' + item.name + ' = "' + values[item.name] + '"' + ';';
            }
            if (item.type == this.FONTFIELD) {
                output += instanceName + '_' + item.name + ' = "' + values[item.name] + '"' + ';';
            }
            if (item.type == this.CHOICEFIELD) {
                //two output types can be used here index and actual values
                if (item.param1) //index output, zero based
                {
                    output += instanceName + '_' + item.name + ' = ' + values[item.name] + ';';
                }
                else {
                    output += instanceName + '_' + item.name + ' = "' + values[item.name] + '"' + ';';
                }
            }
            if (item.type == this.FILEFIELD) {
                if (values[item.name].indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) output += instanceName + '_' + item.name + ' = "' + defaultImageFolder + values[item.name] + '"' + ';';
                else output += instanceName + '_' + item.name + ' = "' + userImageFolder + imageSubFolder + values[item.name] + '"' + ';';
            }
            if (item.type == this.CHECKBOX) {
                output += instanceName + '_' + item.name + ' = ' + values[item.name] + ';';
            }
            if (item.type == this.LIST) {
                //we use N simultaneous storage spaces for the arrays
                var outputs = new Array(item.param1.length);
                for (var j = 0; j < outputs.length; j++)
                    outputs[j] = instanceName + '_' + item.param1[j].name + ' = new Array();';
                var nitems = 0;
                while ((item.param1[0].name + nitems) in values) nitems++;

                for (var k = 0; k < nitems; k++) {
                    var ind = k;
                    for (var j = 0; j < item.param1.length; j++) {
                        var item2 = item.param1[j];
                        if (item2.type == this.TEXTFIELD) {
                            if (item2.param1) outputs[j] += instanceName + '_' + item2.name + '[' + k + '] = ' + fixString(values[item2.name + k]) + ';';
                            else outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + fixString(values[item2.name + k]) + '"' + ';';
                        }
                        if (item2.type == this.TEXTAREA) {
                            outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + fixString(values[item2.name + k]) + '"' + ';';
                        }
                        if (item2.type == this.COLORFIELD) {
                            outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + values[item2.name + k] + '"' + ';';
                        }
                        if (item2.type == this.CHOICEFIELD) {
                            if (item2.param1) //index output, zero based
                            {
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = ' + values[item2.name + k] + ';';
                            }
                            else {
                                outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + values[item2.name + k] + '"' + ';';
                            }
                        }
                        if (item2.type == this.FILEFIELD) {
                            var value = values[item2.name + k];
                            if (value == undefined) value = '';
                            if (value.indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "' + defaultImageFolder + value + '";';
                            else outputs[j] += instanceName + '_' + item2.name + '[' + k + ']  = "'  + userImageFolder + imageSubFolder+ value + '";';
                        }
                    }
                }
                for (var j = 0; j < outputs.length; j++)
                    output += outputs[j];

            }
            if (item.type == this.CONSTANT) {
                var value = item.param1;
                if (item.param2) {
                    if (values[item.name].indexOf('em_') > -1 && EffectMaker.getEnvironment() != EffectMaker.STANDALONE) output += instanceName + '_' + item.name + ' = "' + defaultImageFolder + values[item.name] + '"' + ';';
                    else output += instanceName + '_' + item.name + ' = "' + userImageFolder + imageSubFolder + values[item.name] + '"' + ';';
                }
                else {
                    if (typeof (value) === 'string') output += instanceName + '_' + item.name + ' = "' + values[item.name] + '";';
                    else output += instanceName + '_' + item.name + ' = ' + values[item.name] + ';';
                }
            }
        }
        return output;
    };

    function fixString(s) {
        if (s == undefined || s == null || s == '') return s;
        s = s.replace(new RegExp(carriagereturn+linefeed, 'g'), '<br/>');
        s = s.replace(new RegExp(linefeed, 'g'), '<br/>');
        s = s.replace(new RegExp(singlequote, 'g'), backslash + singlequote);
        s = s.replace(new RegExp(doublequote, 'g'), backslash + doublequote);
        return s;
    };

};

function ConfiguratorItem(type, name, category, label, description, param1, param2, param3) {
    this.type = type;
    this.name = name;
    this.category = category;
    this.label = label;
    this.description = description;
    this.param1 = param1;
    this.param2 = param2;
    this.param3 = param3;

};
/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
function EffectMakerConfiguration() {
    this.SHAREPOINT = 0, this.WORDPRESS = 1, this.DRUPAL = 2, this.JOOMBLA = 3, this.STANDALONE = 4;
    var hostUrl = null;
    var environment = this.SHAREPOINT;

    EffectMakerConfiguration.prototype.getHostUrl = function () {
        return hostUrl;
    };

    EffectMakerConfiguration.prototype.getEnvironment = function () {
        return environment;
    };

    EffectMakerConfiguration.prototype.getEffectFolder = function () {
        return effectFolder;
    };

    EffectMakerConfiguration.prototype.getUserImageFolder = function () {
        return userImageFolder;
    };

    EffectMakerConfiguration.prototype.getSystemImageFolder = function () {
        return systemImageFolder;
    };

    EffectMakerConfiguration.prototype.getDefaultImageFolder = function () {
        return defaultImageFolder;
    };

    EffectMakerConfiguration.prototype.getWorkFolder = function () {
        return userImageFolder;
    };

    EffectMakerConfiguration.prototype.getAppContextSite = function () {
        //Sharepoint only
        if (environment == this.SHAREPOINT) {
            return appContextSite;
        }
        else return null;
    };

    EffectMakerConfiguration.prototype.getClientContext = function () {
        //Sharepoint only
        if (environment == this.SHAREPOINT) {
            return clientContext;
        }
        else return null;
    };

    EffectMakerConfiguration.prototype.init = function (env) {
        environment = env;
        if (env == this.SHAREPOINT) {
            clientContext = SP.ClientContext.get_current();
            hostUrl = EffectMakerConfiguration.prototype.getQueryStringParameter('SPHostUrl') + '/';
            userImageFolder = hostUrl + 'Effect Maker Work Folder/';
            appContextSite = new SP.AppContextSite(clientContext, hostUrl); //Get this from user input or context tokens. 
            effectFolder = '../Scripts/Effects/';
            defaultImageFolder = '../Lists/Workspace/';
            systemImageFolder = '../Images/';
        }
        else if (env == this.WORDPRESS) {
            //add wordpress stuff here
            hostUrl = pluginsUrl; //this URL comes from a PHP script and function plugins_url()
            defaultImageFolder = hostUrl + 'workspace/';
            systemImageFolder = hostUrl + 'images/';
            effectFolder = hostUrl + 'js/effects/'
        }
        else if (env == this.DRUPAL) {
            //add drupal stuff here
        }
        else {
            //add joombla stuff here
        }
    };

    EffectMakerConfiguration.prototype.getQueryStringParameter = function (paramToRetrieve) {
        var params;
        var strParams;

        params = document.URL.split('?')[1].split('&');
        strParams = '';
        for (var i = 0; i < params.length; i = i + 1) {
            var singleParam = params[i].split('=');
            if (singleParam[0] == paramToRetrieve)
                return decodeURIComponent(singleParam[1]);
        }
    };

    EffectMakerConfiguration.prototype.getCurrentConfiguration = function () {
        if (environment == this.SHAREPOINT)
            return EffectMakerConfiguration.prototype.getQueryStringParameter('cs');

    };
};
/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

function Effect(id, name, content, configuration, defaultValues, category, descriptiveName, icon, description, browserSupport) {
    this.name = name;
    this.id = id;
    this.content = content;
    this.configuration = configuration;
    this.defaultValues = defaultValues;
    this.category = category;
    this.descriptiveName = descriptiveName;
    this.icon = icon;
    this.description = description;
    this.browserSupport = browserSupport;
};

function EffectManagement(clientContext) {
    var effects = new Array();
    var effectsLoaded = false;
    var oListItem;
    categorynames = new Array();
    carriagereturn = String.fromCharCode(13);
    linefeed = String.fromCharCode(10);
    singlequote = String.fromCharCode(39);
    doublequote = String.fromCharCode(34);
    backslash = String.fromCharCode(92);

    //not used
    EffectManagement.prototype.setEffect = function (effect) {


        var oWebsite = clientContext.get_web();

        var parametersList = oWebsite.get_lists().getByTitle('Effects');

        var itemCreateInfo = new SP.ListItemCreationInformation();

        oListItem = parametersList.addItem(itemCreateInfo);
        oListItem.set_item('Title', effect.name);
        oListItem.set_item('Content', effect.content);
        oListItem.set_item('Configuration', effect.configuration);
        oListItem.set_item('DefaultValues', effect.defaultValues);
        oListItem.set_item('Category1', effect.category);
        oListItem.set_item('DescriptiveName', effect.descriptiveName);
        oListItem.set_item('Icon', effect.icon);
        oListItem.set_item('Description1', effect.description);
        oListItem.set_item('BrowserSupport', effect.browserSupport);
        oListItem.update();

        clientContext.load(oListItem);
        clientContext.executeQueryAsync(
            Function.createDelegate(this, this.onQuerySucceeded_setEffect),
            Function.createDelegate(this, this.onQueryFailed_setEffect)
        );
    };

    //not used
    EffectManagement.prototype.onQuerySucceeded_setEffect = function () {
        EM.addStatusMessage('Effect Item created: ' + oListItem.get_id());
        ParameterIDs[oListItem.get_item('Title')] = oListItem.get_id();
    };

    //not used
    EffectManagement.prototype.onQueryFailed_setEffect = function (sender, args) {
        EM.addErrorMessage('Effect Item Creation Request failed. ' + args.get_message() +
            '\n' + args.get_stackTrace());
    };


    EffectManagement.prototype.getEffect = function (name) {
        return effects[name];
    };

    EffectManagement.prototype.getEffects = function () {
        return effects;
    };

    EffectManagement.prototype.addEffectCode = function (name, instanceName, currentContent, dependentFiles, callBackFunction) {
        var effect = effects[name];
        if (effect.content == null || effect.content.trim().length < 2) {
            $.get(effectFolder + name + '.js', function (data, name, instanceName, currentContent, callBackFunction) {
                effect.content = data;
                currentContent = currentContent+'\r\n'+EffectManagement.prototype.applyInstance(data, instanceName);
                callBackFunction(name, instanceName, currentContent, dependentFiles);
            }, 'text');
        }
        else
        {
            currentContent = currentContent + '\r\n' + EffectManagement.prototype.applyInstance(effect.content, instanceName);
            callBackFunction(name, instanceName, currentContent, dependentFiles);
        }

    }

    //duplicated in EffectRunner.js
    EffectManagement.prototype.applyInstance = function(content,instanceName)
    {
        content = content.replace(new RegExp('_01_', 'g'), instanceName + '_');
        content = content.replace(new RegExp('&amp;', 'g'), '&');
        content = content.replace(new RegExp('&lt;', 'g'), '<');
        return content.replace(new RegExp('&gt;', 'g'), '>');
    };

    //duplicated in EffectRunner.js
    EffectManagement.prototype.applyEvaluateInstance = function (effectName, instanceName) {
        var effect = effects[effectName];
        if (!$('#' + instanceName + '_animation').length) {
            $('#animation').html('<div id="' + instanceName + '_animation"></div>');
        }
        if (effect.content == null || effect.content.trim().length < 2) {
            $.get(effectFolder + effectName + '.js', function (data) {
                effect.content = data;
                var instanced = EffectManagement.prototype.applyInstance(data, instanceName);
                eval(instanced);
                if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                    eval(instanceName + '_urltarget="_blank";');
                    eval(instanceName + '_target="_blank";');
                }
                AppManagement.prototype.restartEffect();
            }, 'text');
        }
        else {
            var instanced = EffectManagement.prototype.applyInstance(effect.content, instanceName);
            eval(instanced);
            if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                eval(instanceName + '_urltarget="_blank";');
                eval(instanceName + '_target="_blank";');
            }
            AppManagement.prototype.restartEffect();
        }

    };

    EffectManagement.prototype.initEffects = function () {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = clientContext.get_web().get_lists().getByTitle('Effects');

            var camlQuery = new SP.CamlQuery();
            //get all parameters
            camlQuery.set_viewXml(
                '<View><RowLimit>1000</RowLimit></View>'
            );
            this.collListItem = oList.getItems(camlQuery);


            clientContext.load(this.collListItem);
            clientContext.executeQueryAsync(
                Function.createDelegate(this, this.onQuerySucceeded_initEffects),
                Function.createDelegate(this, this.onQueryFailed_initEffects)
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = {'action': 'load_effect_data'};
            $.get(ajaxurl,ajaxAction, function (data) {
                xmlDoc = $.parseXML(data);
                $xml = $(xmlDoc);
                var i = 0;
                $($xml).find('effect').each(function () {
                    var id = -1; //not used for wordpress
                    var name = $(this).find('name').text();
                    var content = $(this).find('content').text();
                    var configuration = $(this).find('configuration').text();
                    var defaultValues = $(this).find('defaultvalues').text();
                    var category = $(this).find('category').text();
                    var descriptiveName = $(this).find('descriptivename').text();
                    var icon = $(this).find('icon').text();
                    var description = $(this).find('description').text();
                    var browserSupport = $(this).find('browsersupport').text();
                    effects[name] = new Effect(id, name, content, configuration, defaultValues, category, descriptiveName, icon, description, browserSupport);
                    i++;
                });
                EM.addStatusMessage('Loaded ' + i + ' effects...');
                effectsLoaded = true;
            })
            .fail(function () { EM.addErrorMessage('Could not load effect data from server. '); });

        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            var contents;
            var file = 'effectconfiguration.xml';
            var Dir = Ti.Filesystem.getResourcesDirectory() + '/';
            var f = Ti.Filesystem.getFile(Dir, file);
            if (f.exists()) {
                contents = f.read().toString();
                xmlDoc = $.parseXML(contents);
                $xml = $(xmlDoc);
                var i = 0;
                $($xml).find('Row').each(function () {
                    var id = -1; //not used for standalone
                    var name = $(this).find('Field[Name="Title"]').text();
                    var content = $(this).find('Field[Name="Content"]').text();
                    var configuration = $(this).find('Field[Name="Configuration"]').text();
                    var defaultValues = $(this).find('Field[Name="DefaultValues"]').text();
                    var category = $(this).find('Field[Name="Category1"]').text();
                    var descriptiveName = $(this).find('Field[Name="DescriptiveName"]').text();
                    var icon = $(this).find('Field[Name="Icon"]').text();
                    var description = $(this).find('Field[Name="Description1"]').text();
                    var browserSupport = $(this).find('Field[Name="BrowserSupport"]').text();
                    effects[name] = new Effect(id, name, content, configuration, defaultValues, category, descriptiveName, icon, description, browserSupport);
                    i++;
                });
                EM.addStatusMessage('Loaded ' + i + ' effects...');
            }
            effectsLoaded = true;

        }
    };

    EffectManagement.prototype.onQuerySucceeded_initEffects = function (sender, args) {
        var listItemEnumerator = this.collListItem.getEnumerator();
        var i = 0;
        while (listItemEnumerator.moveNext()) {
            var oListItem = listItemEnumerator.get_current();
            var name = oListItem.get_item('Title');
            var id = oListItem.get_id();
            var content = oListItem.get_item('Content1');
            var configuration = oListItem.get_item('Configuration');
            var defaultValues = oListItem.get_item('DefaultValues');
            var category = oListItem.get_item('Category1');
            var descriptiveName = oListItem.get_item('DescriptiveName');
            var icon = oListItem.get_item('Icon');
            var description = oListItem.get_item('Description1');
            var browserSupport = oListItem.get_item('BrowserSupport');
            effects[name] = new Effect(id, name, content, configuration, defaultValues, category, descriptiveName, icon, description, browserSupport);
            i++;
        }
        EM.addStatusMessage('Loaded ' + i + ' Effects..');
        effectsLoaded = true;
    };

    EffectManagement.prototype.onQueryFailed_initEffects = function (sender, args) {
        EM.addErrorMessage('Effect query Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
    };


    EffectManagement.prototype.isLoaded = function () {
        return effectsLoaded;
    };

    EffectManagement.prototype.setupGallery = function (galleryHTMLID, galleryHTMLID2, userConfigurations) {
        var iconFolder = EffectMaker.getSystemImageFolder();
        categorycontent = new Array();
        categorycontenteffects = new Array();
        categorycontent2 = new Array();
        categorynames = new Array();
        categoryids = new Array();
        $(galleryHTMLID).html('');
        $(galleryHTMLID).tooltip();
        $(galleryHTMLID2).html('');
        $(galleryHTMLID2).tooltip();
        var tabHTMLHeaders = '<ul>';
        var tabHTMLContent = '';
        var tabHTMLContent2 = '';
        var i = 0;
        //in standalone the system works in a different way
        //user can pick a file instead
        if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE)
        {

        }
        else
        { 
            //personal configuration options
            categorynames.push('Your configurations');
            tabHTMLHeaders += '<li><a href="#efcat-' + (i + 1) + '">' + 'Your configurations' + '</a></li>';
            categorycontent['Your configurations'] = '<div id="efcat-' + (i + 1) + '" style="width:480px">';
            categorycontent2['Your configurations'] = '<h3>Your configurations</h3><div>';
            i++;
            var content = '';
            content += '<BR><div>Select from the list below to change an existing configuration that you have previously created: </div><BR/>';
            content += '<select id="loadconfiguration">';
            //two output types can be used here index and actual values
            for (var key in userConfigurations) {
                content += '<option value="' + key + '">' + key + '</option>';
            }
            content += '</select>';
            content += '<BR/><BR/><button onclick="AM.loadConfiguration(); return false;" title="Load the configuration you have selected"><img src="' + EffectMaker.getSystemImageFolder() + 'applyicon.png" />&nbsp;&nbsp;Load&nbsp;</button>';
            content += '<BR/><BR/><button onclick="AM.deleteConfiguration(); return false;" title="Delete the configuration you have selected (this cannot be undone)"><img src="' + EffectMaker.getSystemImageFolder() + 'deleteicon.png" />&nbsp;&nbsp;Delete&nbsp;</button>';
            categorycontent['Your configurations'] += content.replace(new RegExp('loadconfiguration', 'g'), 'loadconfiguration1');
            categorycontent2['Your configurations'] += content.replace(new RegExp('loadconfiguration', 'g'), 'loadconfiguration2');
        }

        var effectsperline = 0;
        for (var name in effects) {
            var item = effects[name];
            i++;
            if (categorynames.indexOf(item.category) == -1) {
                categorynames.push(item.category);
                tabHTMLHeaders += '<li><a href="#efcat-' + (i + 1) + '">' + item.category + '</a></li>';
                categorycontent[item.category] = '<div id="efcat-' + (i + 1) + '">';
                categorycontent2[item.category] = '<h3>' + item.category + '</h3><div>';
                categorycontenteffects[item.category] = 0;
            }
            //add icons and effects
            content = '';
            categorycontenteffects[item.category]++;
            if (categorycontenteffects[item.category] > 4)
            {
                content += '<div style="clear:left; width:150px; cursor:pointer; padding-left:10px;" onClick="AM.effectSelected(' + singlequote + item.name + singlequote + ');">';
                categorycontenteffects[item.category] = 0;
            }
            else content += '<div style="float:left; width:150px; cursor:pointer; padding-left:10px;" onClick="AM.effectSelected('+singlequote + item.name + singlequote+');">';
            if (item.icon && item.icon != '') content += '<img src="' + EffectMaker.getDefaultImageFolder() + item.icon + '" style="display:block; margin-left:auto; margin-right:auto; ">';
            else content += '<img src="' + EffectMaker.getDefaultImageFolder() + 'defaultIcon.png' + '" style="display:block; margin-left:auto; margin-right:auto; ">';
            content += '<P style="text-align:center">' + item.descriptiveName + '</P>';
            content += '<P style="font-size:11px">' + item.description + '</P>';
            content += '</div>';
            categorycontent[item.category] += content;
            categorycontent2[item.category] += content;
        }
        for (var i = 0; i < categorynames.length; i++) {
            tabHTMLContent += categorycontent[categorynames[i]] + '</div>';
            tabHTMLContent2 += categorycontent2[categorynames[i]] + '</div>';
        }
        tabHTMLHeaders += '</ul>';
        $(galleryHTMLID).append(tabHTMLHeaders + tabHTMLContent);
        $(galleryHTMLID).tabs({ heightStyle: 'auto' });
        $(galleryHTMLID2).append(tabHTMLContent2);
        $(galleryHTMLID2).accordion({ heightStyle: '600px' });

    };

};

/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
function ErrorManager(errormessageid) {
    this.errormessageid = errormessageid;

    ErrorManager.prototype.addErrorMessage = function (message) {
        $(this.errormessageid).html($(errormessageid).html() + '<div style="color:darkred">' + message + '</div></br>');
        $(this.errormessageid).animate({ scrollTop: $(this.errormessageid).height() }, 10);
    };

    ErrorManager.prototype.addStatusMessage = function (message) {
        $(this.errormessageid).html($(errormessageid).html() + '<div style="color:darkgreen">' + message + '</div></br>');
        $(this.errormessageid).animate({ scrollTop: $(this.errormessageid).height() }, 10);
    };

    ErrorManager.prototype.clear = function () {
        $(this.errormessageid).html('');
    };
};

function LicenseManager(context) {
    var licenseCollection, encodedTopLicense, response, topLicense, xmlDoc, $xml, licenseType, licenseIsValid, licenseIsTest, a;



    LicenseManager.prototype.checkLicenseOnline = function () {
        a = true;
    };


    LicenseManager.prototype.al = function () {
        return true;
    };



    LicenseManager.prototype.verifyLicense = function (license) {
        return true;
    };

};

/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
function ListChanger(object) {
    this.object = object;
    this.createNewList = false;
    this.fieldsToCreate = new Array();
    this.fieldsToCheckFor = object.getFieldsToCheckFor();
    if (object.getListType) this.listType = object.getListType();
    else this.listType = SP.ListTemplateType.genericList;

    ListChanger.prototype.getObject = function () { return this.object };
    ListChanger.prototype.setObject = function (object) {
        this.object = object; this.fieldsToCheckFor = object.getFieldsToCheckFor();
    };
    ListChanger.prototype.getCreateNewList = function () { return this.createNewList };
    ListChanger.prototype.setCreateNewList = function (createNewList) { this.createNewList = createNewList };
    ListChanger.prototype.getFieldsToCreate = function () { return this.fieldsToCreate };
    ListChanger.prototype.setFieldsToCreate = function (fieldsToCreate) { this.fieldsToCreate = fieldsToCreate };
    ListChanger.prototype.getFieldsToCheckFor = function () { return this.fieldsToCheckFor };
    ListChanger.prototype.test = function () { return true };
    ListChanger.prototype.getListType = function () { return this.listType;};
};

function ListManager(clientContext, hostWebContext) {
    var oWebsite = hostWebContext.get_web();
    listIDs = new Array();
    ListManager.prototype.getListGUID = function (listTitle) { return listIDs[listTitle]; };
    ListManager.prototype.getListIDs = function () { return listIDs; };

    function createNewOrAlterList() {
        if (manageListIndex < manageList.length) {

            //important here to create lists in lookup order, "un-lookup" lists first.
            lm = manageList[manageListIndex];
            if (lm.getCreateNewList()) {
                //create new list
                var listCreationInfo = new SP.ListCreationInformation();
                listCreationInfo.set_title(lm.getFieldsToCheckFor()[0]);
                listCreationInfo.set_templateType(lm.getListType());

                oList = oWebsite.get_lists().add(listCreationInfo);
                //somehow we get an unknown error if we try to add the following fields at the same time as creating the list
                /*        for (var i = 1; i < lm.getFieldsToCheckFor().length; i++) {
                            var fieldDefinition = lm.getObject().getFieldDefinition(lm.getFieldsToCheckFor()[i]);
                            this.oField = oList.get_fields().addFieldAsXml(fieldDefinition, true, SP.AddFieldOptions.defaultValue);
                        }*/
                EM.addStatusMessage('Creating new list: ' + lm.getFieldsToCheckFor()[0]);
                clientContext.load(oList);
                clientContext.executeQueryAsync(function () {
                    var result = oList.get_title() + ' created, will now add fields.';
                    listIDs[oList.get_title()] = oList.get_id();
                    EM.addStatusMessage(result);
                    lm.setCreateNewList(false); //Next time this is run, it will add fields instead, since manageListIndex is not incremented it will process the same list again
                    createNewOrAlterList();
                }, function (sender, args) {
                    EM.addErrorMessage('List creation/update request failed. ' + args.get_message());
                    manageListIndex++;
                    createNewOrAlterList();
                });
            }
            else {
                //add fields to existing list
                oList = oWebsite.get_lists().getByTitle(lm.getFieldsToCheckFor()[0]);
                for (var i = 0; i < lm.getFieldsToCreate().length; i++) {
                    var fieldDefinition = lm.getObject().getFieldDefinition(lm.getFieldsToCreate()[i]);
                    this.oField = oList.get_fields().addFieldAsXml(fieldDefinition, true, SP.AddFieldOptions.defaultValue);
                }
                EM.addStatusMessage('Updating existing list: ' + lm.getFieldsToCheckFor()[0]);
                clientContext.load(oList);
                clientContext.executeQueryAsync(function (sender, args) {
                    var result = oList.get_title() +' '+ (lm.getFieldsToCreate().length) + ' fields added.';
                    EM.addStatusMessage(result);
                    manageListIndex++;
                    createNewOrAlterList();
                }, function (sender, args) {
                    EM.addErrorMessage('List creation/update request failed. ' + args.get_message());
                    manageListIndex++;
                    createNewOrAlterList();
                });
            }
        }
        else
            functionToRun();
    };

    ListManager.prototype.createLists = function () {
        manageListIndex = 0;
        createNewOrAlterList();
    };

    function checkList() {
        if (manageListIndex < manageList.length) {
            var oList = oWebsite.get_lists().getByTitle(manageList[manageListIndex].getFieldsToCheckFor()[0]);
            listFields = oList.get_fields();
            clientContext.load(listFields);
            clientContext.executeQueryAsync(function () {
                var enumerator = listFields.getEnumerator();
                var containsFields = new Array();
                while (enumerator.moveNext()) {
                    var oField = enumerator.get_current();
                    containsFields.push(oField.get_title());
                    EM.addStatusMessage('List ' + manageList[manageListIndex].getFieldsToCheckFor()[0] + ' : Found field ' + oField.get_title() + ' with internal name : ' + oField.get_internalName());
                }
                for (var i = 1; i < manageList[manageListIndex].getFieldsToCheckFor().length; i++) {
                    var fieldName = manageList[manageListIndex].getFieldsToCheckFor()[i];
                    var res = containsFields.indexOf(fieldName) > -1;
                    if (!res) {
                        manageList[manageListIndex].getFieldsToCreate().push(fieldName);
                    }
                }
                manageList[manageListIndex].setCreateNewList(false);
                manageListIndex++;
                checkList();
            }, function (sender, args) {
                manageList[manageListIndex].setCreateNewList(true);
                for (var i = 1; i < manageList[manageListIndex].getFieldsToCheckFor().length; i++) {
                    var fieldName = manageList[manageListIndex].getFieldsToCheckFor()[i];
                    if (fieldName != 'Title') manageList[manageListIndex].getFieldsToCreate().push(fieldName);
                }
                manageListIndex++;
                checkList();
            });
        }
        else
            ListManager.prototype.createLists();
    };

    function getListIDs(listIDs) {
        this.collList = oWebsite.get_lists();
        clientContext.load(collList);

        clientContext.executeQueryAsync(
            function onQuerySucceeded() {
                var listEnumerator = collList.getEnumerator();

                while (listEnumerator.moveNext()) {
                    var oList = listEnumerator.get_current();
                    listIDs[oList.get_title()] = oList.get_id();
                    /*      listInfo += 'Title: ' + oList.get_title() + ' Created: ' +
                              oList.get_created().toString() + '\n';*/
                }
                //           alert(listInfo);
                checkList();
            },

            function onQueryFailed(sender, args) {
                /*     alert('Request failed. ' + args.get_message() +
                         '\n' + args.get_stackTrace());*/
                checkList();
            });
    };



    ListManager.prototype.checkLists = function (manageList2, functionToRun2) {
        manageList = manageList2;
        manageListIndex = 0;
        getListIDs(listIDs);
        functionToRun = functionToRun2;
    };

};

/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
function WorkFolder(ID, name) {
    this.ID = ID;
    this.name = name;
    WorkFolder.prototype.getID = function () { return this.ID; };
    WorkFolder.prototype.setID = function (ID) { this.ID = ID; };
    WorkFolder.prototype.getName = function () { return this.name; };
    WorkFolder.prototype.setName = function (name) { this.name = name; };
    WorkFolder.prototype.getFieldsToCheckFor = function () { return ['Effect Maker Work Folder', 'Title']; };
    WorkFolder.prototype.getFieldDefinition = function (name) {
        if (name == 'Title') return null;//title will be used here
    };
    WorkFolder.prototype.getFieldDefinitions = function () {
        return [];
    };
    WorkFolder.prototype.getListType = function () { return SP.ListTemplateType.documentLibrary;}
};

function UserConfiguration(ID, name, effectName, configuration) {
    this.ID = ID;
    this.name = name;
    this.effectName = effectName;
    this.configuration = encodeURIComponent(configuration);
    UserConfiguration.prototype.getID = function () { return this.ID; };
    UserConfiguration.prototype.setID = function (ID) { this.ID = ID; };
    UserConfiguration.prototype.getName = function () { return this.name; };
    UserConfiguration.prototype.setName = function (name) { this.name = name; };
    UserConfiguration.prototype.getEffectName = function () { return this.effectName; };
    UserConfiguration.prototype.setEffectName = function (effectName) { this.effectName = effectName; };
    UserConfiguration.prototype.getConfiguration = function () { return this.configuration; };
    UserConfiguration.prototype.setConfiguration = function (configuration) { this.configuration = encodeURIComponent(configuration); };
    UserConfiguration.prototype.getFieldsToCheckFor = function () { return ['Effect Maker User Configurations', 'Title', 'EffectName', 'Configuration']; };
    UserConfiguration.prototype.getFieldDefinition = function (name) {
        if (name == 'Title') return null;//title will be used here
        else if (name == 'EffectName') return '<Field DisplayName="EffectName" Type="Text"/>';
        else if (name == 'Configuration') return '<Field DisplayName="Configuration" Type="Note" RichText="FALSE" NumLines="6"/>';
    };
    UserConfiguration.prototype.getFieldDefinitions = function () {
        return [UserConfiguration.prototype.getFieldDefinition('EffectName'), UserConfiguration.prototype.getFieldDefinition('Configuration')];
    };
    UserConfiguration.prototype.getListType = function () { return SP.ListTemplateType.genericList; };
    UserConfiguration.prototype.getConfigurationEval = function () {
        var decoded = decodeURIComponent(this.configuration);
        return 'var defaultValues={' + secure(decoded) + '};';
    };
    UserConfiguration.prototype.getConfigurationEval2 = function () {
        var parameters = null;
        eval('parameters={' + secure(decodeURIComponent(this.configuration)) + '};');
        var name = parameters['name'];
        var s = '';
        for (var key in parameters) {
            if (typeof parameters[key] == 'string' )
            {
                s += name + '_' + key + ' = "' + parameters[key] + '";';
            }
            else
            {
                s += name + '_' + key + ' = ' + parameters[key] + ';';
            }
        }
        return s;
    };
    UserConfiguration.prototype.getConfigurationFromDefaultValues = function (uncodedDefaultValues) {
        var parameters = null;
        eval('parameters={' + uncodedDefaultValues + '};');
        var name = parameters['name'];
        var s = '';
        for (var key in parameters) {
            if (typeof parameters[key] == 'string') {
                s += name + '_' + key + ' = "' + parameters[key] + '";';
            }
            else {
                s += name + '_' + key + ' = ' + parameters[key] + ';';
            }
        }
        return s;
    };

  /*  function secure(s) {
        s = s.replace(new RegExp('"', 'g'), '&quot;');
        s = s.replace(new RegExp('\'', 'g'), '&apos;');
        s = s.replace(new RegExp(': &quot;', 'g'), ': "');
        s = s.replace(new RegExp('&quot;,', 'g'), '",');
        if (s.indexOf('&quot;', s.length - 6) !== -1) s = s.substring(0, s.length - 6) + '"';
        //for security reasons, converts all ' and " to HTML equivalent
        return s;
    };
    */
    function secure(s) {
        var carriagereturn = String.fromCharCode(13);
        var linefeed = String.fromCharCode(10);
        var singlequote = String.fromCharCode(39);
        var doublequote = String.fromCharCode(34);
        var backslash = String.fromCharCode(92);
        s = s.replace(new RegExp(doublequote, 'g'), '&quot;');
        s = s.replace(new RegExp(singlequote, 'g'), '&apos;');
        s = s.replace(new RegExp(': &quot;', 'g'), ': "');
        s = s.replace(new RegExp('&quot;,', 'g'), '",');
        if (s.indexOf('&quot;', s.length - 6) !== -1) s = s.substring(0, s.length - 6) + '"';
        //for security reasons, converts all ' and " to HTML equivalent
        return s;
    };

};

/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
//Class for managing parameters, they are stored in a Sharepoint library called "Parameters" created internally in the project
//Parameter names are stored in the column "Title" and the strings (only strings) in "ValueString"
//Parameters are preloaded with initparameters in order to reduce contact with SP as much as possible and also simplifies 
//usage due to asynchroneous access

function ParameterManagement(clientContext) {
    var ParameterNames = new Array();
    var ParameterIDs = new Array();
    var ParameterValues = new Array();
    var parametersLoaded = false;
    var oListItem;

    ParameterManagement.prototype.setParameter = function (Name, Value) {

        if (Name in ParameterValues) {
            ParameterValues[Name] = Value;
            this.updateParameter(ParameterIDs[Name], Name, Value);
        }
        else {
            ParameterValues[Name] = Value;

            if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
                var oWebsite = clientContext.get_web();

                var parametersList = oWebsite.get_lists().getByTitle('Parameters');

                var itemCreateInfo = new SP.ListItemCreationInformation();

                oListItem = parametersList.addItem(itemCreateInfo);
                oListItem.set_item('Title', Name);
                oListItem.set_item('ValueString', Value);
                oListItem.update();

                clientContext.load(oListItem);
                clientContext.executeQueryAsync(
                    Function.createDelegate(this, this.onQuerySucceeded_setParameter),
                    Function.createDelegate(this, this.onQueryFailed_setParameter)
                );
            }
            else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
                var ajaxAction = { 'action': 'store_parameter', 'name': Name, 'value': Value };
                $.post(ajaxurl,ajaxAction, function (data) { EM.addStatusMessage('Parameter update posting reply: ' + data); })
                .fail(function () { EM.addErrorMessage('Could not post parameter: ' +Name); });
            }
            else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
                var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getApplicationDataDirectory() + '/', 'effectmakerparams.db'));
                var rows = db.execute("SELECT * FROM parameters WHERE name='"+Name+"';");
                if (rows.rowCount()>0) {
                    db.execute("UPDATE parameters SET value='" + Value + "' WHERE name='" + Name + "'");
                    EM.addStatusMessage('Updating parameter: ' + Name + ' = ' + Value);

                }
                else
                {
                    db.execute("INSERT INTO parameters (id,name,value) VALUES (NULL,'"+Name+"','"+Value+"');");
                    EM.addStatusMessage('Inserting parameter: ' + Name + ' = ' + Value);
                }
                db.close();
            }
        };

    };

    ParameterManagement.prototype.getParameter = function (name) {
        return ParameterValues[name];
    };

    ParameterManagement.prototype.getParameterData = function () {
        return new Array(ParameterIDs,ParameterNames,ParameterValues);
    };

    ParameterManagement.prototype.onQuerySucceeded_setParameter = function () {
        EM.addStatusMessage('Parameter item created: ' + oListItem.get_id());
        ParameterIDs[oListItem.get_item('Title')] = oListItem.get_id();
    };

    ParameterManagement.prototype.onQueryFailed_setParameter = function (sender, args) {
        EM.addErrorMessage('Parameter item Creation Request failed. ' + args.get_message() +
            '\n' + args.get_stackTrace());
    };

    ParameterManagement.prototype.initParameters = function () {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = clientContext.get_web().get_lists().getByTitle('Parameters');

            var camlQuery = new SP.CamlQuery();
            //get all parameters
            camlQuery.set_viewXml(
                '<View><RowLimit>1000</RowLimit></View>'
            );
            this.collListItem = oList.getItems(camlQuery);


            clientContext.load(this.collListItem);
            clientContext.executeQueryAsync(
                Function.createDelegate(this, this.onQuerySucceeded_initParameters),
                Function.createDelegate(this, this.onQueryFailed_initParameters)
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'load_parameters' };
            $.get(ajaxurl, ajaxAction, function (data) {
                xmlDoc = $.parseXML(data),
                $xml = $(xmlDoc);
                var i = 0;
                $($xml).find('item').each(function () {
                    ParameterNames[i] = $(this).find('name').text();
                    ParameterIDs[ParameterNames[i]] = $(this).find('id').text();
                    ParameterValues[ParameterNames[i]] = $(this).find('value').text();
                    i++;
                });
                EM.addStatusMessage('Loaded ' + i + ' parameters...');
                parametersLoaded = true;
            })
            .fail(function () { EM.addErrorMessage('Could not load parameters from server. '); });

        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getApplicationDataDirectory() + '/', 'effectmakerparams.db'));
            var rows = db.execute("SELECT * FROM parameters;");
            var i = 0;
            while (rows.isValidRow()) {
                ParameterNames[i] = rows.fieldByName('name');
                ParameterIDs[ParameterNames[i]] = rows.fieldByName('id');
                ParameterValues[ParameterNames[i]] = rows.fieldByName('value');
                i++;
                rows.next();
            }
            db.close();
            EM.addStatusMessage('Loaded ' + i + ' parameters...');
            parametersLoaded = true;
        };
    }

    ParameterManagement.prototype.onQuerySucceeded_initParameters = function (sender, args) {
        var listItemEnumerator = this.collListItem.getEnumerator();
        var i = 0;
        while (listItemEnumerator.moveNext()) {
            var oListItem = listItemEnumerator.get_current();
            ParameterNames[i] = oListItem.get_item('Title');
            ParameterIDs[ParameterNames[i]] = oListItem.get_id();
            ParameterValues[ParameterNames[i]] = oListItem.get_item('ValueString');
            i++;
        };
        EM.addStatusMessage('Loaded ' + i + ' parameters for the App..');
        parametersLoaded = true;
    };

    ParameterManagement.prototype.onQueryFailed_initParameters = function (sender, args) {
        EM.addErrorMessage('Parameter query Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
    };

    ParameterManagement.prototype.updateParameter = function (id, Name, Value) {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = clientContext.get_web().get_lists().getByTitle('Parameters');

            this.oListItem = oList.getItemById(id);
            this.oListItem.set_item('ValueString', Value);
            this.oListItem.update();

            clientContext.executeQueryAsync(
                Function.createDelegate(this, this.onQuerySucceeded_updateParameter),
                Function.createDelegate(this, this.onQueryFailed_updateParameter)
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            for (var i = 0; i < ParameterNames.length; i++) {
                if (ParameterIDs[ParameterNames[i]] == id) {
                    var ajaxAction = { 'action': 'store_parameter', 'name': ParameterNames[i], 'value': Value };
                    $.post(ajaxurl, ajaxAction, function (data) {
                        EM.addStatusMessage('Parameter update posting reply: ' + data);
                    })
                    .done(function () { }).fail(function () { EM.addErrorMessage('Could not post parameter: ' + id); });
                    break;
                }
            }
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getApplicationDataDirectory() + '/', 'effectmakerparams.db'));
            if (id != undefined) {
                db.execute("UPDATE parameters SET value='" + Value + "' WHERE id=" + id + "");
                EM.addStatusMessage('Updating parameter: ID ' + id + ' = ' + Value);
                db.close();
            }
            else {
                db.execute("INSERT INTO parameters (id,name,value) VALUES (NULL,'" + Name + "','" + Value + "');");
                EM.addStatusMessage('Parameter cannot be updated, inserting parameter instead: ' + Name + ' = ' + Value);
                db.close();
                ParameterManagement.prototype.initParameters();
            }

        };

    };

    ParameterManagement.prototype.onQuerySucceeded_updateParameter = function () {
        EM.addStatusMessage('Parameter updated!');
    };

    ParameterManagement.prototype.onQueryFailed_updateParameter = function (sender, args) {
        EM.addErrorMessage('Update parameter request failed. ' + args.get_message() +
            '\n' + args.get_stackTrace());
    };

    ParameterManagement.prototype.isLoaded = function () {
        return parametersLoaded;
    };

    ParameterManagement.prototype.getQueryStringParameter = function (paramToRetrieve) {
        var params;
        var strParams;

        params = document.URL.split('?')[1].split('&');
        strParams = '';
        for (var i = 0; i < params.length; i = i +1) {
            var singleParam = params[i].split('=');
            if (singleParam[0] == paramToRetrieve)
                return decodeURIComponent(singleParam[1]);
    };
    };

};


/*
 * Copyright (c) 2014 Anibal Wainstein, Mandomartis
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

function UserContentManagement(clientContext, hostWebContext) {
    var oWebsite = null;
    if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) oWebsite = hostWebContext.get_web();
    var fileNames = new Array();
    var userConfigurations = new Array();
    var workfolderLoaded = false;
    var userConfigurationsLoaded = false;
    var oListItem;
    var defaultImages = ['em_batteries.png', 'em_bridge.png', 'em_church.png', 'em_church2.png', 'em_church3.png',
        'em_coliseum.png', 'em_column.png', 'em_flower2.png', 'em_flower3.png',
        'em_flower4.png', 'em_flower5.png', 'em_flowercomics1.png', 'em_house.png',
        'em_peacock.png', 'em_port_deepred.jpg', 'em_port_violet.jpg', 'em_portrait1.png', 'em_portrait2.png', 'em_portrait3.png',
        'em_portrait4.png', 'em_portrait5.png', 'em_propeller.png', 'em_rocks.png', 'em_sea.png', 'em_statue.png',
        'em_statue2.png', 'em_tree.png', 'em_white_rose.png', 'em_vina.png', 'em_vina2.png', 'em_windmill.png', 'em_woods.png','em_bluewaterbridge.jpg'];

    UserContentManagement.prototype.getFileNames = function (defaultImagesSelectable) {
        if (defaultImagesSelectable) return fileNames.concat(defaultImages);
        else return fileNames;
    };


    //only load work folder info when editing an effect
    UserContentManagement.prototype.initWorkFolder = function (initUserConf) {
        fileNames = new Array();
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = oWebsite.get_lists().getByTitle('Effect Maker Work Folder');

            var camlQuery = new SP.CamlQuery();
            //get all parameters
            camlQuery.set_viewXml(
                '<View><RowLimit>2000</RowLimit></View>'
            );
            this.collListItem = oList.getItems(camlQuery);


            clientContext.load(this.collListItem);
            clientContext.executeQueryAsync(
                Function.createDelegate(this, this.onQuerySucceeded_initWorkFolder, initUserConf),
                Function.createDelegate(this, this.onQueryFailed_initWorkFolder, initUserConf)
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'load_user_workspace' };
            $.get(ajaxurl, ajaxAction, function (data) {
                xmlDoc = $.parseXML(data),
                $xml = $(xmlDoc);
                var i = 0;
                $($xml).find('item').each(function () {
                    var filename = $(this).find('name').text();
                    if (filename.toLowerCase().indexOf('.png') > -1 || filename.toLowerCase().indexOf('.jpg') > -1 || filename.toLowerCase().indexOf('.gif') > -1) {
                        fileNames[i] = filename;
                        i++;
                    }
                });
                EM.addStatusMessage('Loaded work folder file information for ' + i + ' files...');
                workfolderLoaded = true;
                if (initUserConf) UserContentManagement.prototype.initUserConfigurations();
            })
            .fail(function () {
                EM.addErrorMessage('Could not load work folder. ');
                if (initUserConf) UserContentManagement.prototype.initUserConfigurations();
            });
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
            //load work folder from local computer directory
            var workdir = currentWorkFolder + imageSubFolder;
            var f = Ti.Filesystem.getFile(workdir);
            var fileitems = f.getDirectoryListing();
            for (var i = 0; i < fileitems.length; i++) {
                var filename = fileitems[i].nativePath();
                if (filename.toLowerCase().indexOf('.png') > -1 || filename.toLowerCase().indexOf('.jpg') > -1 || filename.toLowerCase().indexOf('.gif') > -1) {
                    fileNames[i] = filename;
                    if (fileNames[i].indexOf('/') >= 0) fileNames[i] = fileNames[i].substring(fileNames[i].lastIndexOf('/') + 1);
                    if (fileNames[i].indexOf('\\') >= 0) fileNames[i] = fileNames[i].substring(fileNames[i].lastIndexOf('\\') + 1);
                }
            }
            EM.addStatusMessage('Loaded work folder file information for ' + i + ' files...');
            workfolderLoaded = true;
            if (initUserConf) UserContentManagement.prototype.initUserConfigurations();
        };
    };

    UserContentManagement.prototype.onQuerySucceeded_initWorkFolder = function (sender, args) {
        var listItemEnumerator = this.collListItem.getEnumerator();
        var i = 0;
        while (listItemEnumerator.moveNext()) {
            var oListItem = listItemEnumerator.get_current();
            fileNames[i] = oListItem.get_item('FileLeafRef');
            i++;
        }
        fileNames.sort();
        EM.addStatusMessage('Loaded work folder file information for '+i+' files...');
        workfolderLoaded = true;
        UserContentManagement.prototype.initUserConfigurations();
    };

    UserContentManagement.prototype.onQueryFailed_initWorkFolder = function (sender, args) {
        EM.addErrorMessage('Could not load work folder. ' + args.get_message() + '\n' + args.get_stackTrace());
        UserContentManagement.prototype.initUserConfigurations();
    };

    //User configurations must always be loaded
    UserContentManagement.prototype.initUserConfigurations = function () {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = oWebsite.get_lists().getByTitle('Effect Maker User Configurations');

            var camlQuery = new SP.CamlQuery();
            //get all parameters
            camlQuery.set_viewXml(
                '<View><RowLimit>2000</RowLimit></View>'
            );
            this.collListItem = oList.getItems(camlQuery);


            clientContext.load(this.collListItem);
            clientContext.executeQueryAsync(
                Function.createDelegate(this, this.onQuerySucceeded_initUserConfigurations),
                Function.createDelegate(this, this.onQueryFailed_initUserConfigurations)
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'load_user_configuration' };
            $.get(ajaxurl,ajaxAction, function (data) {
                xmlDoc = $.parseXML(data),
                $xml = $(xmlDoc);
                var i = 0;
                $($xml).find('item').each(function () {
                    var id = $(this).find('id').text();
                    var name = $(this).find('name').text();
                    var effectName = $(this).find('effectname').text();
                    var configuration = $(this).find('configuration').text();
                    var conf = new UserConfiguration(id, name, effectName, configuration);
                    conf.configuration = configuration; //The data is alread encoded in the db
                    userConfigurations[name] = conf;
                    i++;
                });
                EM.addStatusMessage('Loaded ' + i + ' user effect configurations...');
                userConfigurationsLoaded = true;
            }
                )
                .fail(function () { EM.addErrorMessage('Could not load user configurations from server. '); });
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
     /*       var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getDesktopDirectory() + '/effect maker work folder/', 'effectmakerdata.db'));
            var rows = db.execute("SELECT * FROM userconfigurations;");
            var i = 0;
            while (rows.isValidRow()) {
                var id = rows.fieldByName('id');
                var name = rows.fieldByName('name');
                var effectName = rows.fieldByName('effectname');
                var configuration = rows.fieldByName('configuration');
                var conf = new UserConfiguration(id, name, effectName, configuration);
                conf.configuration = configuration; //The data is alread encoded in the db
                userConfigurations[name] = conf;
                i++;
                rows.next();
            }
            EM.addStatusMessage('Loaded ' + i + ' user effect configurations...');*/
            userConfigurationsLoaded = true;
        };
    };

    UserContentManagement.prototype.onQuerySucceeded_initUserConfigurations = function (sender, args) {
        var listItemEnumerator = this.collListItem.getEnumerator();
        var i = 0;
        while (listItemEnumerator.moveNext()) {
            var oListItem = listItemEnumerator.get_current();
            var id = oListItem.get_id();
            var name = oListItem.get_item('Title');
            var effectName = oListItem.get_item('EffectName');
            var configuration = oListItem.get_item('Configuration');
            var conf = new UserConfiguration(id, name, effectName, configuration);
            conf.configuration = configuration; //The data is alread encoded in the db
            userConfigurations[name] = conf;
            i++;
        }
        EM.addStatusMessage('Loaded ' + i + ' user effect configurations...');
        userConfigurationsLoaded = true;
    };

    UserContentManagement.prototype.onQueryFailed_initUserConfigurations = function (sender, args) {
        EM.addErrorMessage('Could not load effect configurations. ' + args.get_message() + '\n' + args.get_stackTrace());
    };

    UserContentManagement.prototype.setUserConfiguration = function (name, effectName, configuration) {
        var conf = new UserConfiguration(-1, name, effectName, configuration);
        if (userConfigurations[name]) {
            conf = userConfigurations[name];
            delete userConfigurations[name];
            conf.setName(name);
            //effect Name (the effect type) must not be changed here
            conf.setConfiguration(configuration);
        }
        userConfigurations[name] = conf;
        if (conf.ID != -1) UserContentManagement.prototype.updateUserConfiguration(conf);
        else UserContentManagement.prototype.addUserConfiguration(conf);

    };

    UserContentManagement.prototype.addUserConfiguration = function (configuration) {
        $('#loadconfiguration1').append('<option value="' + configuration.getName() + '">' + configuration.getName() + '</option>');
        $('#loadconfiguration2').append('<option value="' + configuration.getName() + '">' + configuration.getName() + '</option>');
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = oWebsite.get_lists().getByTitle('Effect Maker User Configurations');
            var itemCreateInfo = new SP.ListItemCreationInformation();
            oListItem = oList.addItem(itemCreateInfo);
            oListItem.set_item('Title', configuration.getName());
            oListItem.set_item('EffectName', configuration.getEffectName());
            oListItem.set_item('Configuration', configuration.getConfiguration());
            oListItem.update();

            clientContext.load(oListItem);
            clientContext.executeQueryAsync(function () {
                EM.addStatusMessage('User configuration added: ' + oListItem.get_id());
                userConfigurations[oListItem.get_item('Title')].ID = oListItem.get_id();
            },
                function (sender, args) {
                    EM.addErrorMessage('User configuration add request failed. ' + args.get_message() +
                        '\n' + args.get_stackTrace());
                }
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'store_user_configuration', 'name': configuration.getName(), 'effectname': configuration.getEffectName(), 'configuration': configuration.getConfiguration() };
            $.post(ajaxurl, ajaxAction, function (data) { EM.addStatusMessage('User configuration posting reply: ' + data); })
            .done(function () { }).fail(function () { EM.addErrorMessage('Posting user configuration add request failed. '); }).always(function () { EM.addStatusMessage('User configuration added... '); });

        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
    /*        var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getDesktopDirectory() + '/effect maker work folder/', 'effectmakerdata.db'));
            var rows = db.execute("SELECT * FROM userconfigurations WHERE name='" + configuration.getName() + "';");
            if (rows.isValidRow()) {
                db.execute("UPDATE userconfigurations SET configuration='" + configuration.getConfiguration() + "'");
            }
            else {
                db.execute("INSERT INTO userconfigurations (id,name,effectname,configuration) VALUES (NULL,'" + configuration.getName() + "','" + configuration.getEffectName() + "','" + configuration.getConfiguration() + "');");
            }
            db.close();*/
        };

    };


    UserContentManagement.prototype.updateUserConfiguration = function (configuration) {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var oList = oWebsite.get_lists().getByTitle('Effect Maker User Configurations');

            oListItem = oList.getItemById(configuration.ID);
            oListItem.set_item('Title', configuration.getName());
            oListItem.set_item('Configuration', configuration.getConfiguration());
            oListItem.update();

            clientContext.executeQueryAsync(function () {
                EM.addStatusMessage('User configuration updated! ');
            },
               function (sender, args) {
                   EM.addErrorMessage('User configuration update request failed. ' + args.get_message() +
                       '\n' + args.get_stackTrace());
               }
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'store_user_configuration', 'name': configuration.getName(), 'effectname': configuration.getEffectName(), 'configuration': configuration.getConfiguration() };
            $.post(ajaxurl,ajaxAction, function (data) { EM.addStatusMessage('User configuration posting reply: ' + data); })
            .done(function () { }).fail(function () { EM.addErrorMessage('Posting user configuration add request failed. '); }).always(function () { EM.addStatusMessage('User configuration added... '); });

        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
   /*         var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getDesktopDirectory() + '/effect maker work folder/', 'effectmakerdata.db'));
            var rows = db.execute("SELECT * FROM userconfigurations WHERE name='" + configuration.getName() + "';");
            if (rows.isValidRow()) {
                db.execute("UPDATE userconfigurations SET configuration='" + configuration.getConfiguration() + "'");
            }
            else {
                db.execute("INSERT INTO userconfigurations (id,name,effectname,configuration) VALUES (NULL,'" + configuration.getName() + "','" + configuration.getEffectName() + "','" + configuration.getConfiguration() + "');");
            }
            db.close();*/
        };

    };

    UserContentManagement.prototype.deleteUserConfiguration = function (configurationname) {
        if (EffectMaker.getEnvironment() == EffectMaker.SHAREPOINT) {
            var configuration = UserContentManagement.prototype.getUserConfigurationByName(configurationname);
            var oList = oWebsite.get_lists().getByTitle('Effect Maker User Configurations');

            oListItem = oList.getItemById(configuration.ID);
            oListItem.deleteObject();

            clientContext.executeQueryAsync(function () {
                EM.addStatusMessage('Deleted configuration with ID: ' + configurationname);
            },
               function (sender, args) {
                   EM.addErrorMessage('User configuration deletion request failed. ' + args.get_message() +
                       '\n' + args.get_stackTrace());
               }
            );
        }
        else if (EffectMaker.getEnvironment() == EffectMaker.WORDPRESS) {
            var ajaxAction = { 'action': 'delete_user_configuration', 'name': configurationname };
            $.post(ajaxurl,ajaxAction, function (data) { EM.addStatusMessage('User configuration deletion posting reply: ' + data); })
            .done(function () { }).fail(function () { EM.addErrorMessage('Posting user configuration deletion request failed. '); }).always(function () { EM.addStatusMessage('User configuration deleted... '); });

        }
        else if (EffectMaker.getEnvironment() == EffectMaker.STANDALONE) {
     /*       var db = Ti.Database.openFile(Ti.Filesystem.getFile(Ti.Filesystem.getDesktopDirectory() + '/effect maker work folder/', 'effectmakerdata.db'));
            db.execute("DELETE FROM userconfigurations WHERE name='" + configurationname + "';");
            db.close();
            EM.addStatusMessage('User configuration deleted... ');*/
        };

        delete userConfigurations[configurationname];
    };

    UserContentManagement.prototype.getUserConfigurationByName = function (name) {
        return userConfigurations[name];
    };

    UserContentManagement.prototype.getUserConfigurations = function () {
        return userConfigurations;
    };

    UserContentManagement.prototype.getNumberOfInstances = function (effectName) {
        var count = 0;
        for (var k in userConfigurations) {
            if (userConfigurations[k].getEffectName() == effectName) count++;
        }
        return count;
    };

    UserContentManagement.prototype.isLoaded = function () {
        return workfolderLoaded && userConfigurationsLoaded;
    };

    UserContentManagement.prototype.publishEffectStandalone = function (name, instanceName, currentContent, dependentFiles) {
        currentContent += '\r\ndocument.write("<div id=\\"' + instanceName + '_animation\\"></div>"); \r\n function AppManagement(){};\r\n';
        EFM.addEffectCode(name, instanceName, currentContent, dependentFiles, UserContentManagement.prototype.publishEffectStandaloneHelper);
    };

    UserContentManagement.prototype.publishEffectStandaloneHelper = function (name, instanceName, content, dependentFiles) {
        content += '\r\n\r\n$(document).ready(function () {' + instanceName + '_init();});\r\n';
        var workdir = currentWorkFolder;
        var f = Ti.Filesystem.getFile(workdir, instanceName+'.js');
        f.write(content);
        var f2 = Ti.Filesystem.getFile(workdir, instanceName + '.html');
        if (f2.exists()) {
            f2.deleteFile();
        }
        f2 = Ti.Filesystem.getFile(workdir, instanceName + '.html');
        content = '<HTML><BODY>\r\n<!-- saved from url=(0014)about:internet -->\r\n\r\n<script src="http://code.jquery.com/jquery-2.1.0.min.js"></script><script type="text/javascript" src="' + instanceName + '.js"></script><P></P>';
        content += '<P>Paste the following code into your HTML code in your favourite HTML editor where you want this effect to appear.</P>';
        content += '<textarea rows="4" cols="200">&lt;script src="http://code.jquery.com/jquery-2.1.0.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="' + instanceName + '.js"&gt;&lt;/script&gt;</textarea>';
        content += '<P>Make sure you include the following files that this effect needs in order to function into your web server or project:<BR/><BR/>';
        for (var i = 0; i < dependentFiles.length; i++)
        {
            if (i == 0) content +=dependentFiles[i];
            else content +=  ', ' + dependentFiles[i];
        }
        content += '</P></BODY></HTML>';
        f2.write(content);
    };

};

